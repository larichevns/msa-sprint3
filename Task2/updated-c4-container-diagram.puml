@startuml NovaMarket Updated C4 Container Diagram with Order History
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title NovaMarket E-commerce Platform - Updated Container Diagram with Order History

Person(customer, "Customer", "Mobile app user")
Person(seller, "Seller", "Product vendor")
System_Ext(payment_gateway, "Payment Gateway", "External payment processor")
System_Ext(logistics, "Logistics Provider", "External delivery service")

System_Boundary(novamarket, "NovaMarket Platform") {
    Container(mobile_app, "Mobile App", "React Native", "Customer interface with order history")
    Container(api_gateway, "API Gateway", "NGINX", "Routes requests, authentication")
    
    Container(event_bus, "Event Bus", "Apache Kafka", "Message broker for async communication")
    
    ' Core services
    Container(user_service, "User Service", "Java/Spring Boot", "User management, authentication")
    Container(catalog_service, "Catalog Service", "Java/Spring Boot", "Product catalog, search, filtering")
    Container(cart_service, "Cart Service", "Java/Spring Boot", "Shopping cart management")
    Container(order_service, "Order Service", "Java/Spring Boot", "Order orchestration, Saga coordinator")
    Container(inventory_service, "Inventory Service", "Java/Spring Boot", "Stock management, reservation")
    Container(payment_service, "Payment Service", "Java/Spring Boot", "Payment processing")
    Container(delivery_service, "Delivery Service", "Java/Spring Boot", "Delivery management")
    Container(notification_service, "Notification Service", "Java/Spring Boot", "Push notifications, emails")
    
    ' New services for order history
    Container(order_history_service, "Order History Service", "Java/Spring Boot", "CQRS Query Service for order history aggregation")
    Container(review_service, "Review Service", "Java/Spring Boot", "Product reviews and ratings management")
    
    ' Databases
    ContainerDb(user_db, "User Database", "PostgreSQL", "User profiles, auth")
    ContainerDb(catalog_db, "Catalog Database", "PostgreSQL", "Products, categories")
    ContainerDb(cart_db, "Cart Database", "Redis", "Shopping carts")
    ContainerDb(order_db, "Order Database", "PostgreSQL", "Orders, transactions")
    ContainerDb(inventory_db, "Inventory Database", "PostgreSQL", "Stock levels")
    ContainerDb(payment_db, "Payment Database", "PostgreSQL", "Payment records")
    ContainerDb(delivery_db, "Delivery Database", "PostgreSQL", "Delivery info")
    
    ' New databases for aggregated data
    ContainerDb(order_history_db, "Order History Database", "PostgreSQL", "Denormalized order history views")
    ContainerDb(review_db, "Review Database", "PostgreSQL", "Product reviews and ratings")
}

' User interactions
Rel(customer, mobile_app, "Uses", "HTTPS")
Rel(seller, mobile_app, "Uses", "HTTPS")
Rel(mobile_app, api_gateway, "API calls", "HTTPS/REST")

' API Gateway routing
Rel(api_gateway, user_service, "Routes", "HTTP/gRPC")
Rel(api_gateway, catalog_service, "Routes", "HTTP/gRPC")
Rel(api_gateway, cart_service, "Routes", "HTTP/gRPC")
Rel(api_gateway, order_service, "Routes", "HTTP/gRPC")
Rel(api_gateway, order_history_service, "Routes (Order History)", "HTTP/gRPC")
Rel(api_gateway, review_service, "Routes (Reviews)", "HTTP/gRPC")

' Event-driven communication
Rel(order_service, event_bus, "Publishes", "OrderCreated\nOrderCompleted\nOrderCancelled")
Rel(inventory_service, event_bus, "Publishes", "InventoryReserved\nInventoryReleased\nInventoryReservationFailed")
Rel(payment_service, event_bus, "Publishes", "PaymentProcessed\nPaymentFailed\nPaymentRefunded")
Rel(delivery_service, event_bus, "Publishes", "DeliveryScheduled\nDeliveryStatusUpdated\nDeliveryCompleted")
Rel(notification_service, event_bus, "Publishes", "NotificationSent")

' Event consumers
Rel(event_bus, inventory_service, "Consumes", "OrderCreated\nPaymentFailed")
Rel(event_bus, payment_service, "Consumes", "InventoryReserved\nInventoryReservationFailed")
Rel(event_bus, delivery_service, "Consumes", "PaymentProcessed")
Rel(event_bus, notification_service, "Consumes", "OrderCreated\nOrderCompleted\nOrderCancelled\nDeliveryStatusUpdated")
Rel(event_bus, order_service, "Consumes", "InventoryReserved\nPaymentProcessed\nDeliveryScheduled")

' New: Order History Service consumes all order-related events
Rel(event_bus, order_history_service, "Consumes", "OrderCreated\nOrderCompleted\nOrderCancelled\nInventoryReserved\nPaymentProcessed\nDeliveryCompleted")

' Database connections
Rel(user_service, user_db, "Reads/Writes", "JDBC")
Rel(catalog_service, catalog_db, "Reads/Writes", "JDBC")
Rel(cart_service, cart_db, "Reads/Writes", "Redis Protocol")
Rel(order_service, order_db, "Reads/Writes", "JDBC")
Rel(inventory_service, inventory_db, "Reads/Writes", "JDBC")
Rel(payment_service, payment_db, "Reads/Writes", "JDBC")
Rel(delivery_service, delivery_db, "Reads/Writes", "JDBC")
Rel(order_history_service, order_history_db, "Reads/Writes", "JDBC")
Rel(review_service, review_db, "Reads/Writes", "JDBC")

' Cross-service data access for order history aggregation
Rel(order_history_service, catalog_service, "Reads product details", "HTTP/gRPC")
Rel(order_history_service, user_service, "Reads user info", "HTTP/gRPC")

' External integrations
Rel(payment_service, payment_gateway, "Processes payments", "HTTPS/REST")
Rel(delivery_service, logistics, "Creates shipments", "HTTPS/REST")

' New functionality flows
note right of order_history_service
  CQRS Query Service:
  - Aggregates order data from events
  - Maintains denormalized views
  - Serves order history queries
  - Enables fast read operations
end note

note right of review_service
  Review Management:
  - Product reviews and ratings
  - Review moderation
  - Rating aggregation
  - Review analytics
end note

@enduml