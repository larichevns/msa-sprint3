http {
    # Upstream для логистического сервиса с health checks
    upstream logistics_backend {
        server logistics.company.com:443 max_fails=5 fail_timeout=30s;
        
        # Резервный сервер (если есть)
        # server logistics-backup.company.com:443 max_fails=5 fail_timeout=30s backup;
        
        # Настройки keepalive для переиспользования соединений
        keepalive 32;
        keepalive_timeout 60s;
        keepalive_requests 100;
    }

    # Map для отслеживания состояния Circuit Breaker
    map $upstream_status $circuit_breaker_open {
        default 0;
        502     1;  # Bad Gateway
        503     1;  # Service Unavailable
        504     1;  # Gateway Timeout
        500     1;  # Internal Server Error
    }

    # Зона для подсчета ошибок (для более продвинутого Circuit Breaker)
    limit_req_zone $uri zone=circuit_breaker:10m rate=1000r/s;

    server {
        listen 8080;

        # Location для логистического сервиса с Circuit Breaker
        location /logistics/ {
            # Устанавливаем таймауты согласно требованиям (3 секунды)
            proxy_connect_timeout 3s;
            proxy_read_timeout 3s;
            proxy_send_timeout 3s;

            # Настройка повторных попыток
            # При ошибке пробуем следующий сервер в upstream (если есть)
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 6s;

            # Основной проксирующий запрос
            proxy_pass https://logistics_backend;
            
            # Заголовки для проксирования
            proxy_set_header Host logistics.company.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Настройки для keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Буферизация ответов
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;

            # Кеширование успешных ответов (опционально)
            proxy_cache_valid 200 302 1m;
            proxy_cache_valid 404 1m;
            
            # Обработка ошибок - переход на fallback
            proxy_intercept_errors on;
            error_page 502 503 504 = @fallback;
        }

        # Fallback location - возвращаем стандартный ответ при недоступности сервиса
        location @fallback {
            # Устанавливаем заголовки для CORS если нужно
            add_header Access-Control-Allow-Origin * always;
            add_header Content-Type application/json always;
            add_header X-Circuit-Breaker-Status "open" always;
            
            # Возвращаем fallback ответ
            return 503 '{
                "error": "Service temporarily unavailable",
                "message": "Logistics service is currently unavailable. Please try again later.",
                "fallback": true,
                "retry_after": 30
            }';
        }

        # Health check endpoint для проверки состояния Circuit Breaker
        location /health/logistics {
            access_log off;
            
            # Проверяем доступность upstream
            proxy_connect_timeout 1s;
            proxy_read_timeout 1s;
            proxy_pass https://logistics_backend/health;
            
            # Если сервис недоступен, возвращаем статус
            error_page 502 503 504 = @health_fail;
        }

        location @health_fail {
            add_header Content-Type application/json always;
            return 503 '{"status": "unhealthy", "circuit_breaker": "open"}';
        }

        # Endpoint для ручного сброса Circuit Breaker (для администраторов)
        location /admin/circuit-breaker/reset {
            # Ограничиваем доступ только для внутренних IP
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            # Сброс состояния upstream
            # В реальности это может потребовать перезагрузки конфигурации
            add_header Content-Type application/json always;
            return 200 '{"message": "Circuit breaker reset requested"}';
        }
    }

    # Дополнительная конфигурация для метрик и мониторинга
    server {
        listen 9090;
        
        # Метрики для Prometheus
        location /metrics {
            access_log off;
            
            # Здесь можно подключить nginx-prometheus-exporter
            # или использовать встроенный stub_status
            stub_status;
        }
        
        # Статус upstream серверов
        location /upstream_status {
            access_log off;
            
            # Требует модуль upstream_check
            # check_status;
            
            # Альтернативно - возвращаем JSON со статусом
            add_header Content-Type application/json;
            return 200 '{"logistics_backend": {"status": "monitoring"}}';
        }
    }
}